data <- read.table(unz("activity.zip", "activity.dat"), nrows=10, header=T, quote="\"", sep=",")
data <- read.table(unz("activity.zip", "activity.csv"), nrows=10, header=T, quote="\"", sep=",")
data <- read.table(unz("activity.zip", "activity.csv"), header=T, sep=",")
head(data)
con <- unz("activity.zip", "activity.csv")
data <- read.table(con, header=T, sep=",")
close(con)
close(con)
con <- unz("activity.zip", "activity.csv")
data <- read.table(con, header=T, sep=",")
con <- unz("activity.zip", "activity.csv")
close(con)
tail(data)
class(data$steps)
class(data$date)
class(data$interval)
data$date <- as.Date(data$date , "%y-%m-%d")
class(data$date)
date
data
data$date <- as.Date(data$date , "%yyyy-%mm-%dd")
data
data <- read.table(con, header=T, sep=",")
con <- unz("activity.zip", "activity.csv")
data <- read.table(con, header=T, sep=",")
close(con)
data$date <- as.Date(data$date)
data
data$date
class(data$date)
summary(data)
p <- na.omit(data)
summary(p)
aggregate(data$steps, unique(data$date),sum)
aggregate(data$steps, list(unique(data$date)),sum)
unique(data$date)
list(unique(data$date))
class(list(unique(data$date)))
aggregate(data$steps, list(unique(data$date)), sum)
aggregate(data$steps, by = unique(data$date),FUN = sum)
aggregate(data$steps, by = list(unique(data$date)),FUN = sum)
aggregate(data$steps, by = list(data$date),FUN = sum)
aggregate(data$steps, by = list(data$date),FUN = sum, na.rm=TRUE, na.action=NULL)
aggregate(data$steps, by = list(data$date),FUN = mean, na.rm=TRUE, na.action=NULL)
aggregate(data$steps, by = list(data$date),FUN = mean, na.rm=TRUE, na.action=na.omit)
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.omit)
aggregate(data$steps, by = list(data$date),FUN = mean, na.rm=TRUE, na.action=na.omit)
aggregate(data$steps, by = list(data$date),FUN = mean, na.rm=TRUE)
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.pass())
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.pass
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.pass
)
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.pass)
aggregate(data$steps, by = list(data$date),FUN = mean, )
aggregate(data$steps, by = list(data$date),FUN = mean )
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.omit)
aggregate(p$steps, by = list(data$date),FUN = mean, na.action=na.omit)
aggregate(p$steps, by = list(p$date),FUN = mean, na.action=na.omit)
aggregate(data$steps, by = list(data$date),FUN = mean, na.rm = TRUE)
aggregate(data$steps, by = list(data$date), na.rm = TRUE ,FUN = mean, )
aggregate(data$steps, by = list(data$date), na.rm = TRUE ,FUN = mean)
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.omit)
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.exclude)
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.fail)
aggregate(data$steps, by = list(data$date),FUN = mean, na.action=na.pass)
aggregate(data$steps, by = list(data$date),FUN = mean )
aggregate(p$steps, by = list(p$date),FUN = mean )
data <- read.csv(unz("activity.zip", "activity.csv"))
data
data$date
class(data$date)
setwd("/Users/Seby/R/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
data$date <- as.Date(data$date)
p <- na.omit(data)
avg_steps_per_day <- aggregate(p$steps, by = list(p$date),FUN = mean)
avg_steps_per_day
hist(avg_steps_per_day)
hist(avg_steps_per_day$x)
mean(avg_steps_per_day$x)
median(avg_steps_per_day$x)
steps_per_day <- aggregate(p$steps, by = list(p$date),FUN = sum)
labels(steps_per_day)
class(steps_per_day)
names(steps_per_day) <- c("Day","Total")
steps_per_day
hist(steps_per_day)
hist(steps_per_day$Total)
data
head(data)
average_steps <- aggregate(p$steps, by = list(p$interval),FUN = mean)
head(average_steps)
plot(average_steps)
qplot(average_steps)
library("ggplot2")
qplot(average_steps)
average_steps <- aggregate(p$steps, by = list(p$interval),FUN = mean)
plot(average_steps, type="l")
lines(average_steps)
data[is.na(TRUE)]
data[is.na(data$steps)]
setwd("~/R/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
# Process/transform the data (if necessary) into a format suitable for your analysis
data$date <- as.Date(data$date)
data
data[is.na(data$steps)]
head(data)
is.na(data$steps)
data[is.na(data$steps),]
size(data[is.na(data$steps),])
len(data[is.na(data$steps),])
length(data[is.na(data$steps),])
nrows(data[is.na(data$steps),])
nrow(data[is.na(data$steps),])
for (i in data) {
print(i)
}
for (i in data$date) {
print(i)
}
for (i in data) {
print(i)
}
for (i in nrow(data)) {
print(i)
}
for (i in 1:nrow(data)) {
print(i)
}
View(data)
View(data)
if (is.na(data$steps)[i])
)
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])){}
}
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])){print(i)}
}
data$steps[1]
data$steps[2]
for (i in 1:nrow(data)) {
if (!is.na(data$steps[i])){print(i)}
}
for (i in 1:nrow(data)) {
if (!is.na(data$steps[i])){print(i)}
}
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])){data$steps[i]}
}
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])){data$steps[i]}
}
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])){print(data$steps[i])}
}
for (i in 1:nrow(data)) {
if (!is.na(data$steps[i])){print(data$steps[i])}
}
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])){ data$steps[i] <- average_steps$x[average_steps$Group.1 == data$interval[i]] }
}
cData$data
cData <- data
for (i in 1:nrow(cData)) {
if (is.na(cData$steps[i])){
cData$steps[i] <- average_steps$steps[average_steps$interval == cData$interval[i]]
}
}
cData$data
cData
cData$date
weekdays(cData$date)
lybrary(chron)
library(chron)
is.weekend(cData$date)
sapply(cData$date, function(x) if (is.weekend(x)){ x <- "weekday" } else { x <- "weekend" })
cData$factor <- sapply(cData$date, function(x) if (is.weekend(x)){ x <- "weekend" } else { x <- "weekday" })
head(cData)
cData$Day <- weekdays(cData$date)
head(cData)
View(data)
waverage_steps <- aggregate(cData$steps, by=list(interval,factor), FUN = mean)
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
sp + facet_grid(. ~ factor)
cData
head cData
head(cData)
waverage_steps <- aggregate(cData$steps, by=list(cData$interval,cData$factor), FUN = mean)
waverage_steps
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
sp + facet_grid(. ~ factor)
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
sp + facet_grid(. ~ waverage_steps$factor)
sp
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
sp
ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
ggplot(waverage_steps, aes(x=waverage_steps$interval, y=waverage_steps$steps)) + geom_point(shape=1)
ggplot(waverage_steps, aes(x=waverage_steps$interval, y=waverage_steps$steps))
ggplot(waverage_steps, aes(x=waverage_steps$interval, y=waverage_steps$steps)) + geom_point(shape=1)
library(lattice)
cData$day <- sapply(cData$date, function(x) if (is.weekend(x)){ x <- "weekend" } else { x <- "weekday" })
waverage_steps <- transform(waverage_steps, day = factor(day))
waverage_steps <- aggregate(cData$steps, by=list(cData$interval,cData$day), FUN = mean)
waverage_steps <- transform(waverage_steps, day = factor(day))
waverage_steps <- aggregate(cData$steps, by=list(cData$interval,cData$day), FUN = mean)
library(ggplot2)
library(chron)
# Load the data
setwd("~/R/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
# Process/transform the data (if necessary) into a format suitable for your analysis
data$date <- as.Date(data$date)
# Ignore missing values
p <- na.omit(data)
# Calculate the total number of steps taken per day
steps_per_day <- aggregate(steps ~ date, data=p, FUN = sum)
# Make a histogram of the total number of steps taken each day
qplot(steps_per_day$steps,
geom = "histogram",
binwidth = 1000,
xlab = "Steps per day"
)
# Calculate and report the mean of the total number of steps taken per day
mean(steps_per_day$steps)
# Calculate and report the median of the total number of steps taken per day
median(steps_per_day$steps)
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all days (y-axis)
average_steps <- aggregate(steps ~ interval, data=p, FUN = mean)
qplot(interval,
steps,
data = average_steps,
geom = "line",
xlab = "Interval",
ylab = "Average number of steps taken"
)
# Which 5-minute interval, on average across all the days in the dataset,
# contains the maximum number of steps?
average_steps$interval[which.max(average_steps$steps)]
# Calculate and report the total number of missing values in the dataset
# (i.e. the total number of rows with NAs)
sum(is.na(data))
# I chose to use the mean for that 5-minute interval
# Create a new dataset that is equal to the original dataset but with the missing data filled in
cData <- data
for (i in 1:nrow(cData)) {
if (is.na(cData[i,1])){
cData[i,1] <- average_steps$steps[average_steps$interval == cData$interval[i]]
}
}
# Calculate the total number of steps taken per day
csteps_per_day <- aggregate(steps ~ date, data=cData, FUN = sum)
# Make a histogram of the total number of steps taken each day
qplot(csteps_per_day$steps,
geom = "histogram",
binwidth = 1000,
xlab = "Steps per day"
)
# Calculate and report the mean of the total number of steps taken per day
mean(csteps_per_day$steps)
# Calculate and report the median of the total number of steps taken per day
median(csteps_per_day$steps)
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
cData$day <- sapply(cData$date, function(x) if (is.weekend(x)){ x <- "weekend" } else { x <- "weekday" })
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval
# (x-axis) and the average number of steps taken, averaged across all weekday days or weekend
# days (y-axis).
waverage_steps <- transform(cData, day = factor(cData$day))
waverage_steps <- aggregate(cData$steps, by=list(cData$interval,cData$day), FUN = mean)
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
sp + facet_grid(. ~ factor)
sp
sp <- ggplot(waverage_steps, aes(x=waverage_steps$interval, y=waverage_steps$steps)) + geom_point(shape=1)
sp
waverage_steps
waverage_steps <- aggregate(steps ~ date | day , data = cData, FUN = mean)
head(cData)
waverage_steps <- aggregate(steps ~ interval | day , data = cData, FUN = mean)
class(cData$day[1])
waverage_steps <- aggregate(data = cData, by=list(interval = cData$interval, day = cData$day), FUN = mean)
waverage_steps <- aggregate(data = cData, by=list(cData$interval,cData$day), FUN = mean)
waverage_steps <- aggregate(cData$steps, by=list(interval = cData$interval, day = cData$day), FUN = mean)
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_point(shape=1)
sp
sp <- ggplot(waverage_steps, aes(x=interval, y=x)) + geom_point(shape=1)
sp
sp + facet_grid(sex ~ .)
sp + facet_grid(day ~ .)
waverage_steps <- aggregate(steps = cData$steps, by=list(interval = cData$interval, day = cData$day), FUN = mean)
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_lines() + facet_grid(. ~ factor)
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + geom_line() + facet_grid(. ~ factor)
sp
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + facet_grid(. ~ factor)
sp
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + facet_grid(. ~ factor) + geom_point(shape=1)
sp
sp <- ggplot(waverage_steps, aes(x=interval, y=steps)) + facet_grid(. ~ factor)
sp
sp + geom_line()
sp + geom_line() + facet_grid(. ~ day)
sp <- ggplot(waverage_steps, aes(x=interval, y=x)) + facet_grid(. ~ day) + geom_line()
sp
sp <- ggplot(waverage_steps, aes(x=interval, y=x)) + facet_grid(day ~ .) + geom_line()
sp
ggplot(waverage_steps, aes(x=interval, y=x)) + facet_grid(day ~ .) + geom_line()
knit2html()
library(knitr)
knit2html()
knitr2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
